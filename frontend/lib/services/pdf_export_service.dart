import 'dart:typed_data';
import 'dart:convert';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:intl/intl.dart';
import 'package:flutter/foundation.dart';

// Conditional imports for different platforms
import 'pdf_export_io.dart' if (dart.library.html) 'pdf_export_web.dart';

class PdfExportService {
  static Future<dynamic> exportTransactionsToPdf({
    required List<Map<String, dynamic>> transactions,
    required String reportTitle,
    required String fileName,
    Map<String, dynamic>? businessInfo,
  }) async {
    // Use provided business info or fallback for consistency
    Map<String, dynamic> businessData = businessInfo ?? {
      'name': 'XXX',
      'tagline': 'XXX',
      'contact_email': 'XXX',
      'contact_phone': 'XXX',
      'address': 'XXX',
      'primary_color': '#1976D2',
    };
    
    if (businessInfo != null) {
      print('üîç PDF: Using real business branding: ${businessInfo['name']}');
      print('üîç PDF: Business info full data: $businessInfo');
    } else {
      print('üîç PDF: Using fallback business branding for consistency');
    }
    
    // Create PDF document
    final pdf = pw.Document();
    
    // Calculate how many rows can fit per page - optimized for maximum data
    const int rowsPerPage = 35; // Maximized for compact layout
    const int headerHeight = 120; // Reduced header height
    const int summaryHeight = 80; // Reduced summary height
    const int pageHeight = 800; // Approximate available height per page
    
    if (transactions.isEmpty) {
      // Single page for empty state
      pdf.addPage(
        pw.Page(
          pageFormat: PdfPageFormat.a4,
          build: (pw.Context context) {
            return pw.Column(
              crossAxisAlignment: pw.CrossAxisAlignment.start,
              children: [
                _buildCompactHeader(businessData, reportTitle),
                pw.SizedBox(height: 15),
                _buildCompactInvoiceDetails(businessData, reportTitle: reportTitle),
                pw.SizedBox(height: 15),
                _buildEmptyState(),
                
                // Footer with page number and company info
                pw.SizedBox(height: 10), // Reduced spacing
                pw.Container(
                  width: double.infinity,
                  padding: const pw.EdgeInsets.symmetric(vertical: 8),
                  decoration: pw.BoxDecoration(
                    border: pw.Border(
                      top: pw.BorderSide(color: PdfColors.grey300, width: 0.5),
                    ),
                  ),
                  child: pw.Column(
                    children: [
                      pw.Text(
                        'Page 1 of 1',
                        style: const pw.TextStyle(
                          fontSize: 9,
                          color: PdfColors.grey600,
                        ),
                        textAlign: pw.TextAlign.center,
                      ),
                      pw.SizedBox(height: 4),
                      pw.Text(
                        'Generated by Kismayo ICT Solution | Phone: 0614112537 | Website: kismayoict.com',
                        style: const pw.TextStyle(
                          fontSize: 8,
                          color: PdfColors.grey500,
                        ),
                        textAlign: pw.TextAlign.center,
                      ),
                    ],
                  ),
                ),
              ],
            );
          },
        ),
      );
    } else {
      // Calculate total pages needed
      final int totalPages = ((transactions.length / rowsPerPage).ceil()).clamp(1, 999);
      print('üîç PDF: Creating $totalPages pages for ${transactions.length} transactions');
      print('üîç PDF: Rows per page: $rowsPerPage');
      print('üîç PDF: Total transactions: ${transactions.length}');
      
      for (int pageIndex = 0; pageIndex < totalPages; pageIndex++) {
        final int startIndex = pageIndex * rowsPerPage;
        final int endIndex = (startIndex + rowsPerPage).clamp(0, transactions.length);
        final List<Map<String, dynamic>> pageTransactions = transactions.sublist(startIndex, endIndex);
        
        print('üîç PDF: Creating page ${pageIndex + 1} with ${pageTransactions.length} transactions (${startIndex + 1}-${endIndex})');
        
        pdf.addPage(
          pw.Page(
            pageFormat: PdfPageFormat.a4,
            build: (pw.Context context) {
              return pw.Column(
                crossAxisAlignment: pw.CrossAxisAlignment.start,
                children: [
                  // Header (only on first page)
                  if (pageIndex == 0) ...[
                    _buildCompactHeader(businessData, reportTitle),
                    pw.SizedBox(height: 8), // Reduced spacing
                    _buildCompactInvoiceDetails(businessData, reportTitle: reportTitle),
                    pw.SizedBox(height: 8), // Reduced spacing
                  ],
                  
                  // Page number indicator
                  if (pageIndex > 0) ...[
                    pw.Container(
                      width: double.infinity,
                      padding: const pw.EdgeInsets.all(4), // Reduced padding
                      decoration: pw.BoxDecoration(
                        color: PdfColors.grey100,
                        borderRadius: const pw.BorderRadius.all(pw.Radius.circular(4)),
                      ),
                      child: pw.Text(
                        'Page ${pageIndex + 1} of $totalPages',
                        style: const pw.TextStyle(
                          fontSize: 8, // Reduced font size
                          fontWeight: pw.FontWeight.bold,
                          color: PdfColors.grey700,
                        ),
                        textAlign: pw.TextAlign.center,
                      ),
                    ),
                    pw.SizedBox(height: 6), // Reduced spacing
                  ],
                  
                  // Transactions Table for this page
                  _buildCompactInvoiceTable(pageTransactions),
                  
                  // Summary (only on last page)
                  if (pageIndex == totalPages - 1) ...[
                    pw.SizedBox(height: 8), // Reduced spacing
                    _buildCompactInvoiceSummary(transactions),
                  ],
                  
                  // Footer with page number and company info
                  pw.SizedBox(height: 10), // Reduced spacing
                  pw.Container(
                    width: double.infinity,
                    padding: const pw.EdgeInsets.symmetric(vertical: 8),
                    decoration: pw.BoxDecoration(
                      border: pw.Border(
                        top: pw.BorderSide(color: PdfColors.grey300, width: 0.5),
                      ),
                    ),
                    child: pw.Column(
                      children: [
                        pw.Text(
                          'Page ${pageIndex + 1} of $totalPages',
                          style: const pw.TextStyle(
                            fontSize: 9,
                            color: PdfColors.grey600,
                          ),
                          textAlign: pw.TextAlign.center,
                        ),
                        pw.SizedBox(height: 4),
                        pw.Text(
                          'Generated by Kismayo ICT Solution | Phone: 0614112537 | Website: kismayoict.com',
                          style: const pw.TextStyle(
                            fontSize: 8,
                            color: PdfColors.grey500,
                          ),
                          textAlign: pw.TextAlign.center,
                        ),
                      ],
                    ),
                  ),
                ],
              );
            },
          ),
        );
      }
    }
    
    // Save PDF using platform-specific implementation
    final pdfBytes = await pdf.save();
    return await PdfExportPlatform.savePdf(pdfBytes, fileName);
  }

  static Future<dynamic> exportStockSummaryToPdf({
    required List<Map<String, dynamic>> stockData,
    required String reportTitle,
    required String fileName,
    Map<String, dynamic>? businessInfo,
  }) async {
    // Use provided business info or fallback for consistency
    Map<String, dynamic> businessData = businessInfo ?? {
      'name': 'XXX',
      'tagline': 'XXX',
      'contact_email': 'XXX',
      'contact_phone': 'XXX',
      'address': 'XXX',
      'primary_color': '#1976D2',
    };
    
    if (businessInfo != null) {
      print('üîç PDF: Using real business branding: ${businessInfo['name']}');
      print('üîç PDF Stock Summary: Business info full data: $businessInfo');
    } else {
      print('üîç PDF: Using fallback business branding for stock summary');
    }
    
    // Create PDF document
    final pdf = pw.Document();
    
    // Calculate how many rows can fit per page - optimized for maximum data
    const int rowsPerPage = 25; // Maximized for compact layout - Stock summary rows are larger
    const int headerHeight = 120; // Reduced header height
    const int summaryHeight = 80; // Reduced summary height
    const int pageHeight = 800; // Approximate available height per page
    
    if (stockData.isEmpty) {
      // Single page for empty state
      pdf.addPage(
        pw.Page(
          pageFormat: PdfPageFormat.a4,
          build: (pw.Context context) {
            return pw.Column(
              crossAxisAlignment: pw.CrossAxisAlignment.start,
              children: [
                _buildCompactHeader(businessData, reportTitle),
                pw.SizedBox(height: 15),
                _buildCompactInvoiceDetails(businessData, reportTitle: reportTitle),
                pw.SizedBox(height: 15),
                _buildEmptyState(),
                
                // Footer with page number and company info
                pw.SizedBox(height: 10), // Reduced spacing
                pw.Container(
                  width: double.infinity,
                  padding: const pw.EdgeInsets.symmetric(vertical: 8),
                  decoration: pw.BoxDecoration(
                    border: pw.Border(
                      top: pw.BorderSide(color: PdfColors.grey300, width: 0.5),
                    ),
                  ),
                  child: pw.Column(
                    children: [
                      pw.Text(
                        'Page 1 of 1',
                        style: const pw.TextStyle(
                          fontSize: 9,
                          color: PdfColors.grey600,
                        ),
                        textAlign: pw.TextAlign.center,
                      ),
                      pw.SizedBox(height: 4),
                      pw.Text(
                        'Generated by Kismayo ICT Solution | Phone: 0614112537 | Website: kismayoict.com',
                        style: const pw.TextStyle(
                          fontSize: 8,
                          color: PdfColors.grey500,
                        ),
                        textAlign: pw.TextAlign.center,
                      ),
                    ],
                  ),
                ),
              ],
            );
          },
        ),
      );
    } else {
      // Calculate total pages needed
      final int totalPages = ((stockData.length / rowsPerPage).ceil()).clamp(1, 999);
      print('üîç PDF Stock Summary: Creating $totalPages pages for ${stockData.length} products');
      print('üîç PDF Stock Summary: Rows per page: $rowsPerPage');
      print('üîç PDF Stock Summary: Total products: ${stockData.length}');
      
      for (int pageIndex = 0; pageIndex < totalPages; pageIndex++) {
        final int startIndex = pageIndex * rowsPerPage;
        final int endIndex = (startIndex + rowsPerPage).clamp(0, stockData.length);
        final List<Map<String, dynamic>> pageStockData = stockData.sublist(startIndex, endIndex);
        
        print('üîç PDF Stock Summary: Creating page ${pageIndex + 1} with ${pageStockData.length} products (${startIndex + 1}-${endIndex})');
        
        pdf.addPage(
          pw.Page(
            pageFormat: PdfPageFormat.a4,
            build: (pw.Context context) {
              return pw.Column(
                crossAxisAlignment: pw.CrossAxisAlignment.start,
                children: [
                  // Header (only on first page)
                  if (pageIndex == 0) ...[
                    _buildCompactHeader(businessData, reportTitle),
                    pw.SizedBox(height: 8), // Reduced spacing
                    _buildCompactInvoiceDetails(businessData, reportTitle: reportTitle),
                    pw.SizedBox(height: 8), // Reduced spacing
                  ],
                  
                  // Page number indicator
                  if (pageIndex > 0) ...[
                    pw.Container(
                      width: double.infinity,
                      padding: const pw.EdgeInsets.all(4), // Reduced padding
                      decoration: pw.BoxDecoration(
                        color: PdfColors.grey100,
                        borderRadius: const pw.BorderRadius.all(pw.Radius.circular(4)),
                      ),
                      child: pw.Text(
                        'Page ${pageIndex + 1} of $totalPages',
                        style: const pw.TextStyle(
                          fontSize: 8, // Reduced font size
                          fontWeight: pw.FontWeight.bold,
                          color: PdfColors.grey700,
                        ),
                        textAlign: pw.TextAlign.center,
                      ),
                    ),
                    pw.SizedBox(height: 6), // Reduced spacing
                  ],
                  
                  // Stock Summary Table for this page
                  _buildStockSummaryTable(pageStockData),
                  
                  // Summary (only on last page)
                  if (pageIndex == totalPages - 1) ...[
                    pw.SizedBox(height: 8), // Reduced spacing
                    _buildStockSummarySummary(stockData),
                  ],
                  
                  // Footer with page number and company info
                  pw.SizedBox(height: 10), // Reduced spacing
                  pw.Container(
                    width: double.infinity,
                    padding: const pw.EdgeInsets.symmetric(vertical: 8),
                    decoration: pw.BoxDecoration(
                      border: pw.Border(
                        top: pw.BorderSide(color: PdfColors.grey300, width: 0.5),
                      ),
                    ),
                    child: pw.Column(
                      children: [
                        pw.Text(
                          'Page ${pageIndex + 1} of $totalPages',
                          style: const pw.TextStyle(
                            fontSize: 9,
                            color: PdfColors.grey600,
                          ),
                          textAlign: pw.TextAlign.center,
                        ),
                        pw.SizedBox(height: 4),
                        pw.Text(
                          'Generated by Kismayo ICT Solution | Phone: 0614112537 | Website: kismayoict.com',
                          style: const pw.TextStyle(
                            fontSize: 8,
                            color: PdfColors.grey500,
                          ),
                          textAlign: pw.TextAlign.center,
                        ),
                      ],
                    ),
                  ),
                ],
              );
            },
          ),
        );
      }
    }
    
    // Save PDF using platform-specific implementation
    final pdfBytes = await pdf.save();
    return await PdfExportPlatform.savePdf(pdfBytes, fileName);
  }
  

  
    // Build compact header
  static pw.Widget _buildCompactHeader(Map<String, dynamic> businessInfo, String reportTitle) {
    final businessName = businessInfo['name'] ?? 'XXX';
    final primaryColor = _parseColor(businessInfo['primary_color'] ?? '#1976D2');
    final tagline = businessInfo['tagline'] ?? 'XXX';
    
    print('üîç PDF Header: Business name: "$businessName"');
    print('üîç PDF Header: Business tagline: "$tagline"');
    print('üîç PDF Header: Report title: "$reportTitle"');
    
    return pw.Container(
      width: double.infinity,
      padding: const pw.EdgeInsets.all(8), // Reduced padding
      decoration: pw.BoxDecoration(
        color: primaryColor,
        borderRadius: const pw.BorderRadius.all(pw.Radius.circular(4)), // Smaller radius
      ),
      child: pw.Column(
        crossAxisAlignment: pw.CrossAxisAlignment.start,
        children: [
          // Top Row: Business Info and Logo
          pw.Row(
            children: [
              // Business Logo
              _buildBusinessLogo(businessInfo, primaryColor),
              
              pw.SizedBox(width: 8), // Reduced spacing
              
              // Business Info
              pw.Expanded(
                child: pw.Column(
                  crossAxisAlignment: pw.CrossAxisAlignment.start,
                  children: [
                    pw.Text(
                      businessName,
                      style: pw.TextStyle(
                        color: PdfColors.white,
                        fontSize: 14, // Reduced font size
                        fontWeight: pw.FontWeight.bold,
                      ),
                      maxLines: 1, // Single line to save space
                    ),
                    pw.Text(
                      tagline,
                      style: pw.TextStyle(
                        color: PdfColors.grey300,
                        fontSize: 9, // Reduced font size
                        fontWeight: pw.FontWeight.normal,
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
          
          pw.SizedBox(height: 6), // Reduced spacing
          
          // Bottom Row: Report Title
          pw.Container(
            width: double.infinity,
            padding: const pw.EdgeInsets.symmetric(horizontal: 8, vertical: 4), // Reduced padding
            decoration: pw.BoxDecoration(
              color: PdfColors.grey300,
              borderRadius: const pw.BorderRadius.all(pw.Radius.circular(4)), // Smaller radius
            ),
            child: pw.Text(
              reportTitle,
              style: pw.TextStyle(
                color: PdfColors.white,
                fontSize: 9, // Reduced font size
                fontWeight: pw.FontWeight.bold,
              ),
              textAlign: pw.TextAlign.center,
            ),
          ),
        ],
      ),
    );
  }
  
  // Build compact invoice details
  static pw.Widget _buildCompactInvoiceDetails(Map<String, dynamic> businessInfo, {String? reportTitle}) {
    final contactEmail = businessInfo['contact_email'] ?? 'XXX';
    final contactPhone = businessInfo['contact_phone'] ?? 'XXX';
    final address = businessInfo['address'] ?? 'XXX';
    
    // Extract filter information from report title
    String filterInfo = 'No filters applied';
    if (reportTitle != null) {
      if (reportTitle.contains('(') && reportTitle.contains(')')) {
        // Extract filter info from parentheses
        final startIndex = reportTitle.indexOf('(');
        final endIndex = reportTitle.indexOf(')');
        if (startIndex != -1 && endIndex != -1 && endIndex > startIndex) {
          filterInfo = reportTitle.substring(startIndex + 1, endIndex);
        }
      } else {
        // If no parentheses, show the full title as filter info
        filterInfo = reportTitle;
      }
    }
    
    return pw.Container(
      padding: const pw.EdgeInsets.all(6), // Reduced padding
      decoration: pw.BoxDecoration(
        color: PdfColors.grey50,
        borderRadius: const pw.BorderRadius.all(pw.Radius.circular(4)), // Smaller radius
        border: pw.Border.all(color: PdfColors.grey300),
      ),
      child: pw.Row(
        children: [
          // Contact Information
          pw.Expanded(
            child: pw.Column(
              crossAxisAlignment: pw.CrossAxisAlignment.start,
              children: [
                pw.Text(
                  'Contact Info',
                  style: pw.TextStyle(
                    fontSize: 9, // Reduced font size
                    fontWeight: pw.FontWeight.bold,
                    color: PdfColors.grey800,
                  ),
                ),
                pw.SizedBox(height: 2), // Reduced spacing
                pw.Text('Email: $contactEmail', style: const pw.TextStyle(fontSize: 7)), // Smaller font
                pw.Text('Phone: $contactPhone', style: const pw.TextStyle(fontSize: 7)), // Smaller font
              ],
            ),
          ),
          
          // Address
          pw.Expanded(
            child: pw.Column(
              crossAxisAlignment: pw.CrossAxisAlignment.start,
              children: [
                pw.Text(
                  'Address',
                  style: pw.TextStyle(
                    fontSize: 9, // Reduced font size
                    fontWeight: pw.FontWeight.bold,
                    color: PdfColors.grey800,
                  ),
                ),
                pw.SizedBox(height: 2), // Reduced spacing
                pw.Text(
                  address,
                  style: const pw.TextStyle(fontSize: 7), // Smaller font
                  maxLines: 1, // Single line to save space
                ),
              ],
            ),
          ),
          
          // Invoice Details
          pw.Expanded(
            child: pw.Column(
              crossAxisAlignment: pw.CrossAxisAlignment.end,
              children: [
                pw.Text(
                  'Report Details',
                  style: pw.TextStyle(
                    fontSize: 9, // Reduced font size
                    fontWeight: pw.FontWeight.bold,
                    color: PdfColors.grey800,
                  ),
                ),
                pw.SizedBox(height: 2), // Reduced spacing
                pw.Text(
                  'Date: ${DateFormat('MMM dd, yyyy').format(DateTime.now())}',
                  style: const pw.TextStyle(fontSize: 7), // Smaller font
                ),
                pw.Text(
                  'Time: ${DateFormat('HH:mm').format(DateTime.now())}',
                  style: const pw.TextStyle(fontSize: 7), // Smaller font
                ),
                pw.SizedBox(height: 1), // Reduced spacing
                pw.Text(
                  'Filters: $filterInfo',
                  style: const pw.TextStyle(fontSize: 7), // Smaller font
                  textAlign: pw.TextAlign.right,
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
  
  // Build stock summary table
  static pw.Widget _buildStockSummaryTable(List<Map<String, dynamic>> stockData) {
    return pw.Container(
      decoration: pw.BoxDecoration(
        border: pw.Border.all(color: PdfColors.grey400),
        borderRadius: const pw.BorderRadius.all(pw.Radius.circular(6)),
      ),
      child: pw.Table(
        border: pw.TableBorder.all(color: PdfColors.grey400, width: 0.3),
        columnWidths: const {
          0: pw.FlexColumnWidth(2), // Product
          1: pw.FlexColumnWidth(1), // SKU
          2: pw.FlexColumnWidth(1), // Category
          3: pw.FlexColumnWidth(0.8), // Sold Qty
          4: pw.FlexColumnWidth(0.8), // Qty Remaining
          5: pw.FlexColumnWidth(1), // Revenue
          6: pw.FlexColumnWidth(1), // Profit
        },
        children: [
          // Table Header
          pw.TableRow(
            decoration: const pw.BoxDecoration(color: PdfColors.grey200),
            children: [
              pw.Padding(
                padding: const pw.EdgeInsets.all(3), // Reduced padding
                child: pw.Text(
                  'Product',
                  style: pw.TextStyle(
                    fontWeight: pw.FontWeight.bold,
                    fontSize: 8, // Reduced font size
                  ),
                ),
              ),
              pw.Padding(
                padding: const pw.EdgeInsets.all(3), // Reduced padding
                child: pw.Text(
                  'SKU',
                  style: pw.TextStyle(
                    fontWeight: pw.FontWeight.bold,
                    fontSize: 8, // Reduced font size
                  ),
                  textAlign: pw.TextAlign.center,
                ),
              ),
              pw.Padding(
                padding: const pw.EdgeInsets.all(3), // Reduced padding
                child: pw.Text(
                  'Category',
                  style: pw.TextStyle(
                    fontWeight: pw.FontWeight.bold,
                    fontSize: 8, // Reduced font size
                  ),
                ),
              ),
              pw.Padding(
                padding: const pw.EdgeInsets.all(3), // Reduced padding
                child: pw.Text(
                  'Sold',
                  style: pw.TextStyle(
                    fontWeight: pw.FontWeight.bold,
                    fontSize: 8, // Reduced font size
                  ),
                  textAlign: pw.TextAlign.center,
                ),
              ),
              pw.Padding(
                padding: const pw.EdgeInsets.all(3), // Reduced padding
                child: pw.Text(
                  'Remaining',
                  style: pw.TextStyle(
                    fontWeight: pw.FontWeight.bold,
                    fontSize: 8, // Reduced font size
                  ),
                  textAlign: pw.TextAlign.center,
                ),
              ),
              pw.Padding(
                padding: const pw.EdgeInsets.all(3), // Reduced padding
                child: pw.Text(
                  'Revenue',
                  style: pw.TextStyle(
                    fontWeight: pw.FontWeight.bold,
                    fontSize: 8, // Reduced font size
                  ),
                  textAlign: pw.TextAlign.center,
                ),
              ),
              pw.Padding(
                padding: const pw.EdgeInsets.all(3), // Reduced padding
                child: pw.Text(
                  'Profit',
                  style: pw.TextStyle(
                    fontWeight: pw.FontWeight.bold,
                    fontSize: 8, // Reduced font size
                  ),
                  textAlign: pw.TextAlign.center,
                ),
              ),
            ],
          ),
          
          // Table Rows
          ...stockData.map((row) => pw.TableRow(
            children: [
              pw.Padding(
                padding: const pw.EdgeInsets.all(2), // Reduced padding
                child: pw.Text(
                  row['product_name'] ?? '',
                  style: const pw.TextStyle(fontSize: 7), // Smaller font
                  maxLines: 1, // Single line to save space
                ),
              ),
              pw.Padding(
                padding: const pw.EdgeInsets.all(2), // Reduced padding
                child: pw.Text(
                  row['sku'] ?? '',
                  style: const pw.TextStyle(fontSize: 7), // Smaller font
                  textAlign: pw.TextAlign.center,
                ),
              ),
              pw.Padding(
                padding: const pw.EdgeInsets.all(2), // Reduced padding
                child: pw.Text(
                  row['category_name'] ?? '',
                  style: const pw.TextStyle(fontSize: 7), // Smaller font
                ),
              ),
              pw.Padding(
                padding: const pw.EdgeInsets.all(2), // Reduced padding
                child: pw.Text(
                  _safeToInt(row['quantity_sold']).toString(),
                  style: const pw.TextStyle(fontSize: 7), // Smaller font
                  textAlign: pw.TextAlign.center,
                ),
              ),
              pw.Padding(
                padding: const pw.EdgeInsets.all(2), // Reduced padding
                child: pw.Text(
                  _safeToInt(row['quantity_remaining']).toString(),
                  style: const pw.TextStyle(fontSize: 7), // Smaller font
                  textAlign: pw.TextAlign.center,
                ),
              ),
              pw.Padding(
                padding: const pw.EdgeInsets.all(2), // Reduced padding
                child: pw.Text(
                  '\$${_safeToDouble(row['revenue']).toStringAsFixed(2)}',
                  style: const pw.TextStyle(fontSize: 7), // Smaller font
                  textAlign: pw.TextAlign.center,
                ),
              ),
              pw.Padding(
                padding: const pw.EdgeInsets.all(2), // Reduced padding
                child: pw.Text(
                  '\$${_safeToDouble(row['profit']).toStringAsFixed(2)}',
                  style: const pw.TextStyle(fontSize: 7), // Smaller font
                  textAlign: pw.TextAlign.center,
                ),
              ),
            ],
          )).toList(),
        ],
      ),
    );
  }

  // Build compact invoice table
  static pw.Widget _buildCompactInvoiceTable(List<Map<String, dynamic>> transactions) {
    return pw.Container(
      decoration: pw.BoxDecoration(
        border: pw.Border.all(color: PdfColors.grey400),
        borderRadius: const pw.BorderRadius.all(pw.Radius.circular(6)),
      ),
      child: pw.Table(
        border: pw.TableBorder.all(color: PdfColors.grey400, width: 0.3),
        columnWidths: const {
          0: pw.FlexColumnWidth(1), // Date
          1: pw.FlexColumnWidth(2.5), // Product
          2: pw.FlexColumnWidth(0.6), // Qty
          3: pw.FlexColumnWidth(1), // Cost Price
          4: pw.FlexColumnWidth(1), // Sale Price
          5: pw.FlexColumnWidth(1.2), // Total
        },
        children: [
          // Table Header
          pw.TableRow(
            decoration: const pw.BoxDecoration(color: PdfColors.grey200),
            children: [
              pw.Padding(
                padding: const pw.EdgeInsets.all(3), // Reduced padding
                child: pw.Text(
                  'Date',
                  style: pw.TextStyle(
                    fontWeight: pw.FontWeight.bold,
                    fontSize: 8, // Reduced font size
                  ),
                  textAlign: pw.TextAlign.center,
                ),
              ),
              pw.Padding(
                padding: const pw.EdgeInsets.all(3), // Reduced padding
                child: pw.Text(
                  'Product',
                  style: pw.TextStyle(
                    fontWeight: pw.FontWeight.bold,
                    fontSize: 8, // Reduced font size
                  ),
                ),
              ),
              pw.Padding(
                padding: const pw.EdgeInsets.all(3), // Reduced padding
                child: pw.Text(
                  'Qty',
                  style: pw.TextStyle(
                    fontWeight: pw.FontWeight.bold,
                    fontSize: 8, // Reduced font size
                  ),
                  textAlign: pw.TextAlign.center,
                ),
              ),
              pw.Padding(
                padding: const pw.EdgeInsets.all(3), // Reduced padding
                child: pw.Text(
                  'Cost',
                  style: pw.TextStyle(
                    fontWeight: pw.FontWeight.bold,
                    fontSize: 8, // Reduced font size
                  ),
                  textAlign: pw.TextAlign.center,
                ),
              ),
              pw.Padding(
                padding: const pw.EdgeInsets.all(3), // Reduced padding
                child: pw.Text(
                  'Price',
                  style: pw.TextStyle(
                    fontWeight: pw.FontWeight.bold,
                    fontSize: 8, // Reduced font size
                  ),
                  textAlign: pw.TextAlign.center,
                ),
              ),
              pw.Padding(
                padding: const pw.EdgeInsets.all(3), // Reduced padding
                child: pw.Text(
                  'Total',
                  style: pw.TextStyle(
                    fontWeight: pw.FontWeight.bold,
                    fontSize: 8, // Reduced font size
                  ),
                  textAlign: pw.TextAlign.center,
                ),
              ),
            ],
          ),
          
          // Table Rows
          ...transactions.map((tx) => pw.TableRow(
            children: [
              pw.Padding(
                padding: const pw.EdgeInsets.all(2), // Reduced padding
                child: pw.Text(
                  _formatDate(tx['created_at'] ?? ''),
                  style: const pw.TextStyle(fontSize: 7), // Smaller font
                  textAlign: pw.TextAlign.center,
                ),
              ),
              pw.Padding(
                padding: const pw.EdgeInsets.all(2), // Reduced padding
                child: pw.Text(
                  tx['product_name'] ?? '',
                  style: const pw.TextStyle(fontSize: 7), // Smaller font
                  maxLines: 1, // Single line to save space
                ),
              ),
              pw.Padding(
                padding: const pw.EdgeInsets.all(2), // Reduced padding
                child: pw.Text(
                  tx['quantity']?.toString() ?? '',
                  style: const pw.TextStyle(fontSize: 7), // Smaller font
                  textAlign: pw.TextAlign.center,
                ),
              ),
              pw.Padding(
                padding: const pw.EdgeInsets.all(2), // Reduced padding
                child: pw.Text(
                  _getCostPrice(tx).toStringAsFixed(2),
                  style: const pw.TextStyle(fontSize: 7), // Smaller font
                  textAlign: pw.TextAlign.center,
                ),
              ),
              pw.Padding(
                padding: const pw.EdgeInsets.all(2), // Reduced padding
                child: pw.Text(
                  _getSalePrice(tx).toStringAsFixed(2),
                  style: const pw.TextStyle(fontSize: 7), // Smaller font
                  textAlign: pw.TextAlign.center,
                ),
              ),
              pw.Padding(
                padding: const pw.EdgeInsets.all(2), // Reduced padding
                child: pw.Text(
                  _calculateRowTotal(tx).toStringAsFixed(2),
                  style: const pw.TextStyle(
                    fontSize: 7, // Smaller font
                    fontWeight: pw.FontWeight.bold,
                  ),
                  textAlign: pw.TextAlign.center,
                ),
              ),
            ],
          )).toList(),
        ],
      ),
    );
  }
  
  // Build stock summary summary
  static pw.Widget _buildStockSummarySummary(List<Map<String, dynamic>> stockData) {
    final totalSold = stockData.fold(0, (sum, row) => sum + _safeToInt(row['quantity_sold']));
    final totalRemaining = stockData.fold(0, (sum, row) => sum + _safeToInt(row['quantity_remaining']));
    final totalRevenue = stockData.fold(0.0, (sum, row) => sum + _safeToDouble(row['revenue']));
    final totalProfit = stockData.fold(0.0, (sum, row) => sum + _safeToDouble(row['profit']));
    final totalProducts = stockData.length;
    
    return pw.Container(
      padding: const pw.EdgeInsets.all(12),
      decoration: pw.BoxDecoration(
        color: PdfColors.grey50,
        borderRadius: const pw.BorderRadius.all(pw.Radius.circular(6)),
        border: pw.Border.all(color: PdfColors.grey400),
      ),
      child: pw.Column(
        crossAxisAlignment: pw.CrossAxisAlignment.end,
        children: [
          // Summary rows
          _buildSummaryRow('Total Products:', totalProducts, isCurrency: false),
          pw.SizedBox(height: 4),
          _buildSummaryRow('Total Sold Quantity:', totalSold, isCurrency: false),
          pw.SizedBox(height: 4),
          _buildSummaryRow('Total Remaining Quantity:', totalRemaining, isCurrency: false),
          pw.SizedBox(height: 8),
          pw.Divider(color: PdfColors.grey400, thickness: 0.5),
          pw.SizedBox(height: 6),
          
          // Financial Summary
          _buildSummaryRow('Total Revenue:', totalRevenue),
          pw.SizedBox(height: 4),
          _buildSummaryRow('Total Profit:', totalProfit),
          pw.SizedBox(height: 8),
          pw.Divider(color: PdfColors.grey400, thickness: 0.5),
          pw.SizedBox(height: 6),
          
          // Footer
          pw.Container(
            padding: const pw.EdgeInsets.all(8),
            decoration: pw.BoxDecoration(
              color: PdfColors.grey100,
              borderRadius: const pw.BorderRadius.all(pw.Radius.circular(6)),
            ),
            child: pw.Text(
              'Stock Summary Report Generated',
              style: pw.TextStyle(
                fontSize: 10,
                fontWeight: pw.FontWeight.normal,
                color: PdfColors.grey700,
              ),
              textAlign: pw.TextAlign.center,
            ),
          ),
        ],
      ),
    );
  }

  // Build compact invoice summary
  static pw.Widget _buildCompactInvoiceSummary(List<Map<String, dynamic>> transactions) {
    final subtotal = _calculateSubtotal(transactions);
    final totalCost = _calculateTotalCost(transactions);
    final totalProfit = _calculateTotalProfit(transactions);
    final totalQuantity = _calculateTotalQuantity(transactions);
    final totalTransactions = transactions.length;
    
    return pw.Container(
      padding: const pw.EdgeInsets.all(12),
      decoration: pw.BoxDecoration(
        color: PdfColors.grey50,
        borderRadius: const pw.BorderRadius.all(pw.Radius.circular(6)),
        border: pw.Border.all(color: PdfColors.grey400),
      ),
      child: pw.Column(
        crossAxisAlignment: pw.CrossAxisAlignment.end,
        children: [
          // Summary rows
          _buildSummaryRow('Subtotal:', subtotal),
          pw.SizedBox(height: 4),
          _buildSummaryRow('Total Cost:', totalCost),
          pw.SizedBox(height: 4),
          _buildSummaryRow('Total Profit:', totalProfit),
          pw.SizedBox(height: 4),
          _buildSummaryRow('Total Items:', totalQuantity, isCurrency: false),
          pw.SizedBox(height: 4),
          _buildSummaryRow('Transactions:', totalTransactions, isCurrency: false),
          pw.SizedBox(height: 8),
          pw.Divider(color: PdfColors.grey400, thickness: 0.5),
          pw.SizedBox(height: 6),
          
          // Grand Total
          pw.Row(
            mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
            children: [
              pw.Text(
                'GRAND TOTAL:',
                style: pw.TextStyle(
                  fontSize: 14,
                  fontWeight: pw.FontWeight.bold,
                  color: PdfColors.grey900,
                ),
              ),
              pw.Text(
                '\$${subtotal.toStringAsFixed(2)}',
                style: pw.TextStyle(
                  fontSize: 14,
                  fontWeight: pw.FontWeight.bold,
                  color: PdfColors.grey900,
                ),
              ),
            ],
          ),
          
          pw.SizedBox(height: 12),
          
          // Footer
          pw.Container(
            padding: const pw.EdgeInsets.all(8),
            decoration: pw.BoxDecoration(
              color: PdfColors.grey100,
              borderRadius: const pw.BorderRadius.all(pw.Radius.circular(6)),
            ),
            child: pw.Text(
              'Thank you for your business!',
              style: pw.TextStyle(
                fontSize: 10,
                fontWeight: pw.FontWeight.normal,
                color: PdfColors.grey700,
              ),
              textAlign: pw.TextAlign.center,
            ),
          ),
        ],
      ),
    );
  }
  
  // Build summary row helper
  static pw.Widget _buildSummaryRow(String label, dynamic value, {bool isCurrency = true}) {
    return pw.Row(
      mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
      children: [
        pw.Text(
          label,
          style: const pw.TextStyle(fontSize: 9, color: PdfColors.grey600),
        ),
        pw.Text(
          isCurrency ? '\$${value.toStringAsFixed(2)}' : value.toString(),
          style: const pw.TextStyle(fontSize: 9, color: PdfColors.grey600),
        ),
      ],
    );
  }
  
  // Build empty state
  static pw.Widget _buildEmptyState() {
    return pw.Center(
      child: pw.Container(
        padding: const pw.EdgeInsets.all(30),
        child: pw.Column(
          children: [
            pw.Text(
              'No transactions found',
              style: const pw.TextStyle(fontSize: 14, color: PdfColors.grey),
            ),
            pw.SizedBox(height: 6),
            pw.Text(
              'There are no transactions to display in this report.',
              style: const pw.TextStyle(fontSize: 10, color: PdfColors.grey500),
            ),
          ],
        ),
      ),
    );
  }
  
  // Build business logo widget
  static pw.Widget _buildBusinessLogo(Map<String, dynamic> businessInfo, PdfColor primaryColor) {
    final businessName = businessInfo['name'] ?? 'XXX';
    final logoUrl = businessInfo['logo_url'];
    final logoData = businessInfo['logo']; // Base64 encoded logo data
    
    print('üîç PDF Logo: logo_url = $logoUrl');
    print('üîç PDF Logo: logo data available = ${logoData != null}');
    
    // Try to use actual logo if available
    if (logoData != null && logoData.toString().isNotEmpty) {
      try {
        // Handle base64 encoded logo
        String base64Data = logoData.toString();
        if (base64Data.startsWith('data:image/')) {
          // Remove data URL prefix
          base64Data = base64Data.split(',')[1];
        }
        
        print('üîç PDF Logo: Using base64 logo data');
        return pw.Container(
          width: 30,
          height: 30,
          decoration: pw.BoxDecoration(
            borderRadius: const pw.BorderRadius.all(pw.Radius.circular(4)),
          ),
          child: pw.Image(
            pw.MemoryImage(
              base64Decode(base64Data)
            ),
            fit: pw.BoxFit.cover,
          ),
        );
      } catch (e) {
        print('üîç PDF Logo: Error loading base64 logo: $e');
        // Fall back to text initials
      }
    }
    
    // Fallback to text initials
    return pw.Container(
      width: 30, // Reduced size
      height: 30, // Reduced size
      decoration: pw.BoxDecoration(
        color: PdfColors.white,
        borderRadius: const pw.BorderRadius.all(pw.Radius.circular(4)), // Smaller radius
      ),
      child: pw.Center(
        child: pw.Text(
          businessName.isNotEmpty && businessName != 'XXX' 
            ? businessName.substring(0, 1).toUpperCase()
            : 'X',
          style: pw.TextStyle(
            fontSize: 12, // Reduced font size
            fontWeight: pw.FontWeight.bold,
            color: primaryColor,
          ),
        ),
      ),
    );
  }

  // Helper methods
  static String _formatDate(String timestamp) {
    try {
      if (timestamp.isEmpty) return '';
      final dateTime = DateTime.parse(timestamp);
      final localDateTime = dateTime.toLocal();
      return '${localDateTime.day.toString().padLeft(2, '0')}/${localDateTime.month.toString().padLeft(2, '0')}/${localDateTime.year} ${localDateTime.hour.toString().padLeft(2, '0')}:${localDateTime.minute.toString().padLeft(2, '0')}';
    } catch (e) {
      return timestamp;
    }
  }
  
  static double _safeToDouble(dynamic value) {
    if (value == null) return 0.0;
    if (value is num) return value.toDouble();
    if (value is String) return double.tryParse(value) ?? 0.0;
    return 0.0;
  }
  
  // Get cost price from transaction data
  static double _getCostPrice(Map<String, dynamic> transaction) {
    // Try to get cost price from various possible fields
    final costPrice = transaction['product_cost_price'] ?? 
                     transaction['cost_price'] ?? 
                     transaction['unit_cost'] ?? 0.0;
    return _safeToDouble(costPrice);
  }
  
  // Get sale price from transaction data
  static double _getSalePrice(Map<String, dynamic> transaction) {
    // Try to get sale price from various possible fields
    final salePrice = transaction['sale_unit_price'] ?? 
                     transaction['unit_price'] ?? 
                     transaction['product_price'] ?? 
                     transaction['price'] ?? 0.0;
    return _safeToDouble(salePrice);
  }
  
  // Calculate row total
  static double _calculateRowTotal(Map<String, dynamic> transaction) {
    final quantity = _safeToInt(transaction['quantity']);
    final salePrice = _getSalePrice(transaction);
    return quantity * salePrice;
  }
  
  // Calculate subtotal
  static double _calculateSubtotal(List<Map<String, dynamic>> transactions) {
    return transactions.fold(0.0, (sum, tx) => sum + _calculateRowTotal(tx));
  }
  
  // Calculate total cost
  static double _calculateTotalCost(List<Map<String, dynamic>> transactions) {
    return transactions.fold(0.0, (sum, tx) {
      final quantity = _safeToInt(tx['quantity']);
      final costPrice = _getCostPrice(tx);
      return sum + (quantity * costPrice);
    });
  }
  
  // Calculate total profit
  static double _calculateTotalProfit(List<Map<String, dynamic>> transactions) {
    return transactions.fold(0.0, (sum, tx) => sum + _safeToDouble(tx['profit'] ?? 0));
  }
  
  // Calculate total quantity
  static int _calculateTotalQuantity(List<Map<String, dynamic>> transactions) {
    return transactions.fold(0, (sum, tx) => sum + (_safeToInt(tx['quantity'])));
  }
  
  static int _safeToInt(dynamic value) {
    if (value == null) return 0;
    if (value is int) return value;
    if (value is num) return value.toInt();
    if (value is String) return int.tryParse(value) ?? 0;
    return 0;
  }
  
  static PdfColor _parseColor(String hex) {
    try {
      hex = hex.replaceAll('#', '');
      if (hex.length == 6) {
        hex = 'FF$hex';
      }
      return PdfColor.fromInt(int.parse(hex, radix: 16));
    } catch (e) {
      return PdfColors.blue;
    }
  }
  

}
